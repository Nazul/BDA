/*
 * Copyright 2016 Mario Contreras - marioc@nazul.net.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package mx.iteso.msc.bda.banksimulator;

import java.awt.event.ActionEvent;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import mx.iteso.msc.bda.banksimulator.dbaccess.DbClient;
import mx.iteso.msc.bda.banksimulator.entities.*;

/**
 *
 * @author Mario Contreras - marioc@nazul.net
 */
public class MainForm extends javax.swing.JFrame {
    private static final int REFRESH_DELAY = 1_000;
    private HashMap<String, Account> accounts;
    private HashMap<String, Transfer> transfers;
    private TransferProcess process;

    private final Timer timer = new Timer(0, (ActionEvent e) -> {
        loadData();
    });
    
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        // Center form
        setLocationRelativeTo(null);
        // Table selection mode
        // cellSelectionEnabled columnSelectionAllowed rowSellectionAllowed
        accountsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        accountsTable.setColumnSelectionAllowed(false);
        accountsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        transfersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        transfersTable.setColumnSelectionAllowed(false);
        transfersTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        
        // Initial data refresh
        loadData();
        // Start refresh every 1 second
        timer.setDelay(REFRESH_DELAY);
        timer.start();
        
        // Start transfer processing
        process = new TransferProcess();
        process.start();
    }

    private void loadData() {
        refreshAccounts();
        refreshTransfers();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        accountsPopupMenu = new javax.swing.JPopupMenu();
        addAccountsMenuItem2 = new javax.swing.JMenuItem();
        removeAccountsMenuItem2 = new javax.swing.JMenuItem();
        modifyAccountsMenuItem2 = new javax.swing.JMenuItem();
        transfersPopupMenu = new javax.swing.JPopupMenu();
        addTransfersMenuItem2 = new javax.swing.JMenuItem();
        removeTransfersMenuItem2 = new javax.swing.JMenuItem();
        modifyTransfersMenuItem2 = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        accountsTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        transfersTable = new javax.swing.JTable();
        statusLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadDataMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        accountsMenu = new javax.swing.JMenu();
        addAccountsMenuItem = new javax.swing.JMenuItem();
        removeAccountsMenuItem = new javax.swing.JMenuItem();
        modifyAccountsMenuItem = new javax.swing.JMenuItem();
        transfersMenu = new javax.swing.JMenu();
        addTransfersMenuItem = new javax.swing.JMenuItem();
        removeTransfersMenuItem = new javax.swing.JMenuItem();
        modifyTransfersMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        accountsPopupMenu.setLightWeightPopupEnabled(false);

        addAccountsMenuItem2.setLabel("Add Account...");
        addAccountsMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAccountsMenuItem2ActionPerformed(evt);
            }
        });
        accountsPopupMenu.add(addAccountsMenuItem2);

        removeAccountsMenuItem2.setLabel("Remove Account");
        removeAccountsMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAccountsMenuItem2ActionPerformed(evt);
            }
        });
        accountsPopupMenu.add(removeAccountsMenuItem2);

        modifyAccountsMenuItem2.setText("Modify Account...");
        modifyAccountsMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyAccountsMenuItem2ActionPerformed(evt);
            }
        });
        accountsPopupMenu.add(modifyAccountsMenuItem2);

        addTransfersMenuItem2.setText("Add Transfer...");
        addTransfersMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTransfersMenuItem2ActionPerformed(evt);
            }
        });
        transfersPopupMenu.add(addTransfersMenuItem2);

        removeTransfersMenuItem2.setText("Remove Transfer");
        removeTransfersMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTransfersMenuItem2ActionPerformed(evt);
            }
        });
        transfersPopupMenu.add(removeTransfersMenuItem2);

        modifyTransfersMenuItem2.setText("Modify Transfer...");
        modifyTransfersMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyTransfersMenuItem2ActionPerformed(evt);
            }
        });
        transfersPopupMenu.add(modifyTransfersMenuItem2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bank Simulator");
        setSize(new java.awt.Dimension(360, 360));

        jSplitPane1.setDividerLocation(120);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane1.setComponentPopupMenu(accountsPopupMenu);

        accountsTable.setAutoCreateRowSorter(true);
        accountsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Balance", "Pending Transfers"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        accountsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        accountsTable.setComponentPopupMenu(accountsPopupMenu);
        accountsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        accountsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(accountsTable);
        accountsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setComponentPopupMenu(transfersPopupMenu);

        transfersTable.setAutoCreateRowSorter(true);
        transfersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Source", "Destination", "Value", "Status", "Last Modified"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        transfersTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        transfersTable.setColumnSelectionAllowed(true);
        transfersTable.setComponentPopupMenu(transfersPopupMenu);
        transfersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        transfersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(transfersTable);
        transfersTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jSplitPane1.setRightComponent(jScrollPane2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        statusLabel.setText(" ");
        statusLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        getContentPane().add(statusLabel, java.awt.BorderLayout.SOUTH);

        fileMenu.setText("File");

        loadDataMenuItem.setText("Load Data");
        loadDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadDataMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        accountsMenu.setText("Accounts");

        addAccountsMenuItem.setText("Add...");
        addAccountsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAccountsMenuItemActionPerformed(evt);
            }
        });
        accountsMenu.add(addAccountsMenuItem);

        removeAccountsMenuItem.setText("Remove");
        removeAccountsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAccountsMenuItemActionPerformed(evt);
            }
        });
        accountsMenu.add(removeAccountsMenuItem);

        modifyAccountsMenuItem.setText("Modify...");
        modifyAccountsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyAccountsMenuItemActionPerformed(evt);
            }
        });
        accountsMenu.add(modifyAccountsMenuItem);

        menuBar.add(accountsMenu);

        transfersMenu.setText("Transfers");

        addTransfersMenuItem.setText("Add...");
        addTransfersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTransfersMenuItemActionPerformed(evt);
            }
        });
        transfersMenu.add(addTransfersMenuItem);

        removeTransfersMenuItem.setText("Remove");
        removeTransfersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTransfersMenuItemActionPerformed(evt);
            }
        });
        transfersMenu.add(removeTransfersMenuItem);

        modifyTransfersMenuItem.setText("Modify...");
        modifyTransfersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyTransfersMenuItemActionPerformed(evt);
            }
        });
        transfersMenu.add(modifyTransfersMenuItem);

        menuBar.add(transfersMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void loadDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataMenuItemActionPerformed
        // TODO
    }//GEN-LAST:event_loadDataMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        (new AboutDialog(this, true)).setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void addAccountsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAccountsMenuItemActionPerformed
        addAccount();
    }//GEN-LAST:event_addAccountsMenuItemActionPerformed

    private void removeAccountsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAccountsMenuItemActionPerformed
        removeAccount();
    }//GEN-LAST:event_removeAccountsMenuItemActionPerformed

    private void addTransfersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTransfersMenuItemActionPerformed
        addTransfer();
    }//GEN-LAST:event_addTransfersMenuItemActionPerformed

    private void removeTransfersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTransfersMenuItemActionPerformed
        removeTransfer();
    }//GEN-LAST:event_removeTransfersMenuItemActionPerformed

    private void addAccountsMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAccountsMenuItem2ActionPerformed
        addAccount();
    }//GEN-LAST:event_addAccountsMenuItem2ActionPerformed

    private void removeAccountsMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAccountsMenuItem2ActionPerformed
        removeAccount();
    }//GEN-LAST:event_removeAccountsMenuItem2ActionPerformed

    private void addTransfersMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTransfersMenuItem2ActionPerformed
        addTransfer();
    }//GEN-LAST:event_addTransfersMenuItem2ActionPerformed

    private void removeTransfersMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTransfersMenuItem2ActionPerformed
        removeTransfer();
    }//GEN-LAST:event_removeTransfersMenuItem2ActionPerformed

    private void modifyAccountsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyAccountsMenuItemActionPerformed
        modifyAccount();
    }//GEN-LAST:event_modifyAccountsMenuItemActionPerformed

    private void modifyTransfersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyTransfersMenuItemActionPerformed
        modifyTransfer();
    }//GEN-LAST:event_modifyTransfersMenuItemActionPerformed

    private void modifyAccountsMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyAccountsMenuItem2ActionPerformed
        modifyAccount();
    }//GEN-LAST:event_modifyAccountsMenuItem2ActionPerformed

    private void modifyTransfersMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyTransfersMenuItem2ActionPerformed
        modifyTransfer();
    }//GEN-LAST:event_modifyTransfersMenuItem2ActionPerformed

    private void addAccount() {
        AccountDialog dlg = new AccountDialog(this, true);
        Account acc;
        
        acc = dlg.addAccount();
//        if(acc != null) {
//            //accounts.put(acc.getId(), acc);
//            refreshAccounts();
//        }
    }
    
    private void removeAccount() {
        if(accountsTable.getSelectedRowCount() > 0) {
            if(JOptionPane.showConfirmDialog(this, "Are you sure you want to remove selected account?", "Remove Account", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                accounts.remove(accountsTable.getValueAt(accountsTable.getSelectedRow(), 0));
                refreshAccounts();
            }
        }
    }
    
    private void addTransfer() {
        TransferDialog dlg = new TransferDialog(this, true, accounts);
        Transfer transfer;
        
        transfer = dlg.addTransfer();
//        if(transfer != null) {
//            //transfers.put(transfer.getId(), transfer);
//            refreshTransfers();
//        }
    }
    
    private void removeTransfer() {
        
    }

    private void modifyAccount() {
        if(accountsTable.getSelectedRowCount() > 0) {
            AccountDialog dlg = new AccountDialog(this, true);
            Account acc = accounts.get(accountsTable.getValueAt(accountsTable.getSelectedRow(), 0));
        
            dlg.modifyAccount(acc);
            if(dlg.getReturnStatus() == AccountDialog.RET_OK) {
                refreshAccounts();
            }
        }
    }
    
    private void modifyTransfer() {
        if(transfersTable.getSelectedRowCount() > 0) {
            (new TransferDialog(this, true, accounts)).setVisible(true);
        }
    }
    
    private void refreshAccounts() {
        accounts = DbClient.getAllAccounts();
        DefaultTableModel model = (DefaultTableModel)this.accountsTable.getModel();

        if (accounts == null)
            return;
        model.setRowCount(0);

        accounts.forEach((String k, Account v) -> {
            model.addRow(new Object[]{v.getId(), v.getName(), v.getBalance(), v.getPendingTransactions()});
        });
    }

    private void refreshTransfers() {
        transfers = DbClient.getAllTransfers();
        DefaultTableModel model = (DefaultTableModel)this.transfersTable.getModel();

        if (transfers == null)
            return;
        model.setRowCount(0);

        transfers.forEach((String k, Transfer v) -> {
            model.addRow(new Object[]{v.getId(), v.getSource(), v.getDestination(), v.getValue(), v.getStatus(), v.getLastModified()});
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Instead of Nimbus look and feel, let's use System look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu accountsMenu;
    private javax.swing.JPopupMenu accountsPopupMenu;
    private javax.swing.JTable accountsTable;
    private javax.swing.JMenuItem addAccountsMenuItem;
    private javax.swing.JMenuItem addAccountsMenuItem2;
    private javax.swing.JMenuItem addTransfersMenuItem;
    private javax.swing.JMenuItem addTransfersMenuItem2;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem loadDataMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem modifyAccountsMenuItem;
    private javax.swing.JMenuItem modifyAccountsMenuItem2;
    private javax.swing.JMenuItem modifyTransfersMenuItem;
    private javax.swing.JMenuItem modifyTransfersMenuItem2;
    private javax.swing.JMenuItem removeAccountsMenuItem;
    private javax.swing.JMenuItem removeAccountsMenuItem2;
    private javax.swing.JMenuItem removeTransfersMenuItem;
    private javax.swing.JMenuItem removeTransfersMenuItem2;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JMenu transfersMenu;
    private javax.swing.JPopupMenu transfersPopupMenu;
    private javax.swing.JTable transfersTable;
    // End of variables declaration//GEN-END:variables
}

// EOF
